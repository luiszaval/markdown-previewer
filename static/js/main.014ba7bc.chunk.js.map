{"version":3,"sources":["Components/Toolbar1/Toolbar1.js","Components/Editor/Editor.js","Components/Toolbar2/Toolbar2.js","Components/Previewer/Previewer.js","Components/App/App.js","Components/App/actions.js","Components/App/constants.js","Components/App/reducers.js","index.js"],"names":["Toolbar1","id","Editor","input","onChange","value","Toolbar2","Previewer","__html","marked","this","props","sanitize","breaks","dangerouslySetInnerHTML","getMarkdownText","Component","App","onChangeInput","connect","state","dispatch","event","type","target","initialState","store","createStore","action","ReactDOM","render","document","getElementById"],"mappings":"kWAYeA,G,MATE,WAChB,OACC,yBAAKC,GAAG,YACP,yCCKYC,G,MARA,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvB,OACC,6BACC,8BAAUH,GAAG,SAASI,MAAOF,EAAOC,SAAUA,OCMlCE,G,MATE,WAChB,OACC,yBAAKL,GAAG,YACP,4C,iBCcYM,G,sLAZX,MAAO,CAAEC,OADOC,IAAOC,KAAKC,MAAMR,MAAO,CAACS,UAAU,EAAMC,QAAO,O,+BAIjE,OACC,yBACAC,wBAAyBJ,KAAKK,kBAC9Bd,GAAG,gB,GATgBe,cCYlBC,E,uKACI,IAAD,EACwBP,KAAKC,MAA7BR,EADA,EACAA,MAAOe,EADP,EACOA,cACd,OACC,6BACC,kBAAC,EAAD,MACA,kBAAC,EAAD,CACAf,MAAOA,EACPC,SAAUc,IAEV,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWf,MAAOA,S,GAXJa,aAiBHG,eAzBS,SAACC,GAAD,MAAU,CACjCjB,MAAOiB,EAAMjB,UAEa,SAACkB,GAAD,MAAc,CACxCH,cAAe,SAACI,GAAD,OAAUD,ECVW,CACpCE,KCJyB,aDKzBpB,MDQ8CmB,EAAME,OAAOnB,YAqB7Cc,CAA6CF,G,eGiBtDQ,EAAc,CACnBtB,MAjDgB,+qCCMXuB,EAAQC,aD8Ca,WAAiC,IAAhCP,EAA+B,uDAAvBK,EAAcG,EAAS,uCACnDL,EAAeK,EAAfL,KAAMpB,EAASyB,EAATzB,MACb,OAAQoB,GACP,ID1DwB,aC2DvB,OAAO,2BAAIH,GAAX,IAAkBjB,MAAMA,IACzB,QACC,OAAOiB,MCjDVS,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEFK,SAASC,eAAe,W","file":"static/js/main.014ba7bc.chunk.js","sourcesContent":["import React from 'react';\nimport './Toolbar1.css'\n\nconst Toolbar1 = ()=>{\n\treturn(\n\t\t<div id=\"toolbar1\">\n\t\t\t<h1>Editor</h1>\n\t\t\t{/*<i class=\"fa fa-arrows-alt\"></i>*/}\n\t\t</div>\n\t\t)\n}\n\nexport default Toolbar1;","import React from 'react';\nimport './Editor.css'\n\nconst Editor = ({input, onChange})=>{\n\treturn(\n\t\t<div>\n\t\t\t<textarea id=\"editor\" value={input} onChange={onChange}/>\n\t\t</div>\n\t\t)\n}\n\nexport default Editor;","import React from 'react';\nimport './Toolbar2.css';\n\nconst Toolbar2 = ()=>{\n\treturn(\n\t\t<div id=\"toolbar2\">\n\t\t\t<h1>Previewer</h1>\n\t\t\t{/*<i class=\"fa fa-arrows-alt\"></i>*/}\n\t\t</div>\n\t\t)\n}\n\nexport default Toolbar2;","import React, {Component} from 'react';\nimport marked from 'marked';\nimport './Previewer.css'\n\n\nclass Previewer extends Component{\n\tgetMarkdownText() {\n    var rawMarkup = marked(this.props.input, {sanitize: true, breaks:true});\n    return { __html: rawMarkup };\n  }\n  render() {\n    return (\n    \t<div \n    \tdangerouslySetInnerHTML={this.getMarkdownText()} \n    \tid=\"preview\"\n    \t/>\n    )\n  }\n}\n\nexport default Previewer;\n\n\n ","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport Toolbar1 from '../Toolbar1/Toolbar1.js';\nimport Editor from '../Editor/Editor.js';\nimport Toolbar2 from '../Toolbar2/Toolbar2.js';\nimport Previewer from '../Previewer/Previewer.js';\n\nimport {changeInput} from './actions.js'\n\nconst mapStateToProps = (state)=>({\n\tinput: state.input\n});\nconst mapDispatchToProps = (dispatch) =>({\n\tonChangeInput: (event) =>dispatch(changeInput(event.target.value)) \n});\n\n\nclass App extends Component{\n\trender(){\n\t\tconst {input, onChangeInput} = this.props\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Toolbar1 />\n\t\t\t\t<Editor \n\t\t\t\tinput={input} \n\t\t\t\tonChange={onChangeInput}\n\t\t\t\t/>\n\t\t\t\t<Toolbar2 />\n\t\t\t\t<Previewer input={input}/>\n\t\t\t</div>\n\t\t\t)\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","import {USER_INPUT} from './constants.js';\n\n\nexport const changeInput = (input)=>({\n\ttype: USER_INPUT,\n\tinput,\n})","export const USER_INPUT = 'USER_INPUT'","import {USER_INPUT} from './constants.js';\n\n\nconst placeholder = \n`# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`\n\nconst initialState ={\n\tinput:placeholder\n}\n\nexport const changeInput = (state = initialState, action)=>{\n\tconst {type, input} = action;\n\tswitch (type){\n\t\tcase USER_INPUT:\n\t\t\treturn {...state, input:input};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers } from 'redux';\n\nimport {changeInput} from './Components/App/reducers.js'\n\nconst store = createStore(changeInput);\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );"],"sourceRoot":""}